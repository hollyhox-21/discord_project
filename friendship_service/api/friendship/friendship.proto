syntax = "proto3";

package github.com.hollyhox_21.discord_project.friendship_service;

import "friendship/messages.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


option go_package = "github.com/hollyhox-21/discord_project/friendship_service/pkg/api/friendship;friendship";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Friendship service";
    version: "1.0";
    contact: {
      name: "";
    };
  };
  external_docs: {
    url: "";
    description: "Сервис управления взаимосвязями между пользователями";
  };
  schemes: HTTP;
  schemes: HTTPS;
};

service FriendshipService {
  rpc FriendshipRequest(FriendshipRequestRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/friend/request"
      body: "*"
    };
  }
  rpc FriendshipList(FriendshipListRequest) returns (FriendshipListResponse) {
    option (google.api.http) = {
      get: "/api/v1/friend/list/{user_id}"
    };
  }
  rpc FriendshipDelete(FriendshipDeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/friend/delete/{user_id}"
    };
  }
  rpc FriendshipAccept(FriendshipAcceptRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/v1/friend/accept"
    };
  }
  rpc FriendshipDecline(FriendshipDeclineRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/v1/friend/decline"
    };
  }
}