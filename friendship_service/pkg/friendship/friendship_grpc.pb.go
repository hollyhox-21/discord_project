// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: friendship/friendship.proto

package friendship

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FriendshipService_FriendshipRequest_FullMethodName = "/github.com.hollyhox_21.discord_project.friendship_service.FriendshipService/FriendshipRequest"
	FriendshipService_FriendshipList_FullMethodName    = "/github.com.hollyhox_21.discord_project.friendship_service.FriendshipService/FriendshipList"
	FriendshipService_FriendshipDelete_FullMethodName  = "/github.com.hollyhox_21.discord_project.friendship_service.FriendshipService/FriendshipDelete"
	FriendshipService_FriendshipAccept_FullMethodName  = "/github.com.hollyhox_21.discord_project.friendship_service.FriendshipService/FriendshipAccept"
	FriendshipService_FriendshipDecline_FullMethodName = "/github.com.hollyhox_21.discord_project.friendship_service.FriendshipService/FriendshipDecline"
)

// FriendshipServiceClient is the client API for FriendshipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendshipServiceClient interface {
	FriendshipRequest(ctx context.Context, in *FriendshipRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FriendshipList(ctx context.Context, in *FriendshipListRequest, opts ...grpc.CallOption) (*FriendshipListResponse, error)
	FriendshipDelete(ctx context.Context, in *FriendshipDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FriendshipAccept(ctx context.Context, in *FriendshipAcceptRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FriendshipDecline(ctx context.Context, in *FriendshipDeclineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type friendshipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendshipServiceClient(cc grpc.ClientConnInterface) FriendshipServiceClient {
	return &friendshipServiceClient{cc}
}

func (c *friendshipServiceClient) FriendshipRequest(ctx context.Context, in *FriendshipRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FriendshipService_FriendshipRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) FriendshipList(ctx context.Context, in *FriendshipListRequest, opts ...grpc.CallOption) (*FriendshipListResponse, error) {
	out := new(FriendshipListResponse)
	err := c.cc.Invoke(ctx, FriendshipService_FriendshipList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) FriendshipDelete(ctx context.Context, in *FriendshipDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FriendshipService_FriendshipDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) FriendshipAccept(ctx context.Context, in *FriendshipAcceptRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FriendshipService_FriendshipAccept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) FriendshipDecline(ctx context.Context, in *FriendshipDeclineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FriendshipService_FriendshipDecline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendshipServiceServer is the server API for FriendshipService service.
// All implementations should embed UnimplementedFriendshipServiceServer
// for forward compatibility
type FriendshipServiceServer interface {
	FriendshipRequest(context.Context, *FriendshipRequestRequest) (*emptypb.Empty, error)
	FriendshipList(context.Context, *FriendshipListRequest) (*FriendshipListResponse, error)
	FriendshipDelete(context.Context, *FriendshipDeleteRequest) (*emptypb.Empty, error)
	FriendshipAccept(context.Context, *FriendshipAcceptRequest) (*emptypb.Empty, error)
	FriendshipDecline(context.Context, *FriendshipDeclineRequest) (*emptypb.Empty, error)
}

// UnimplementedFriendshipServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFriendshipServiceServer struct {
}

func (UnimplementedFriendshipServiceServer) FriendshipRequest(context.Context, *FriendshipRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipRequest not implemented")
}
func (UnimplementedFriendshipServiceServer) FriendshipList(context.Context, *FriendshipListRequest) (*FriendshipListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipList not implemented")
}
func (UnimplementedFriendshipServiceServer) FriendshipDelete(context.Context, *FriendshipDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipDelete not implemented")
}
func (UnimplementedFriendshipServiceServer) FriendshipAccept(context.Context, *FriendshipAcceptRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipAccept not implemented")
}
func (UnimplementedFriendshipServiceServer) FriendshipDecline(context.Context, *FriendshipDeclineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipDecline not implemented")
}

// UnsafeFriendshipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendshipServiceServer will
// result in compilation errors.
type UnsafeFriendshipServiceServer interface {
	mustEmbedUnimplementedFriendshipServiceServer()
}

func RegisterFriendshipServiceServer(s grpc.ServiceRegistrar, srv FriendshipServiceServer) {
	s.RegisterService(&FriendshipService_ServiceDesc, srv)
}

func _FriendshipService_FriendshipRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).FriendshipRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_FriendshipRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).FriendshipRequest(ctx, req.(*FriendshipRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_FriendshipList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).FriendshipList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_FriendshipList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).FriendshipList(ctx, req.(*FriendshipListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_FriendshipDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).FriendshipDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_FriendshipDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).FriendshipDelete(ctx, req.(*FriendshipDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_FriendshipAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).FriendshipAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_FriendshipAccept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).FriendshipAccept(ctx, req.(*FriendshipAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_FriendshipDecline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipDeclineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).FriendshipDecline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_FriendshipDecline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).FriendshipDecline(ctx, req.(*FriendshipDeclineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendshipService_ServiceDesc is the grpc.ServiceDesc for FriendshipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendshipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.hollyhox_21.discord_project.friendship_service.FriendshipService",
	HandlerType: (*FriendshipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FriendshipRequest",
			Handler:    _FriendshipService_FriendshipRequest_Handler,
		},
		{
			MethodName: "FriendshipList",
			Handler:    _FriendshipService_FriendshipList_Handler,
		},
		{
			MethodName: "FriendshipDelete",
			Handler:    _FriendshipService_FriendshipDelete_Handler,
		},
		{
			MethodName: "FriendshipAccept",
			Handler:    _FriendshipService_FriendshipAccept_Handler,
		},
		{
			MethodName: "FriendshipDecline",
			Handler:    _FriendshipService_FriendshipDecline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friendship/friendship.proto",
}
