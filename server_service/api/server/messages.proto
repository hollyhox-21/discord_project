syntax = "proto3";

package github.com.hollyhox_21.discord_project.server_service;

import "buf/validate/validate.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/hollyhox-21/discord_project/server_service/pkg/api/server;server";

message ServerInfo {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "ProfileInfo"
      description: "ProfileInfo - информация профиля"
    }
  };
  string  nickname = 1;
  string  about_server = 2;
  string  avatar_server_url = 3;
}

message Server {
  // user_id - уникальный идентификатор пользователя
  uint64 server_id = 1 [json_name = "server_id"];
  // info - информация о пользователе
  ServerInfo info = 2 [json_name = "info"];
}

message ServerInfoRequest {
  uint64 server_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message ServerInfoResponse {
  Server            server = 1 [json_name = "server"];
  repeated string   users = 5 [json_name = "users"];
}

message CreateServerRequest {
  string server_name = 1 [(google.api.field_behavior) = REQUIRED];
  string about_server = 2;
  string avatar_server_url = 3;
}

message CreateServerResponse {
  uint64 server_id = 1 [json_name = "server_id"];
}

message ServerListRequest {
 uint64 user_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message ServerListResponse {

}

message InviteToServerRequest {
  uint64 server_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message SubscribeServerRequest {
  uint64 server_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message UnsubscribeServerRequest {
  uint64 server_id = 1 [(google.api.field_behavior) = REQUIRED];
}